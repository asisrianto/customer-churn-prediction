# -*- coding: utf-8 -*-
"""customer-churn-prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xwwewsj7B6rNYWTRWr8cq72CGMBxOU5o

# **Data Science in Marketing: Customer Churn Prediction**

## Libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, classification_report
import pickle

"""## Data Preparation

Load the dataset
"""

url = 'https://storage.googleapis.com/dqlab-dataset/dqlab_telco_final.csv'
df = pd.read_csv(url)

df.info()

df.shape

df.head()

df.customerID.nunique()

"""## Exploratory Data Analysis

Visualize the churn percentage
"""

fig = plt.figure()
ax = fig.add_axes([0,0,1,1])
ax.axis('equal')
labels = ['No', 'Yes']
churn = df.Churn.value_counts()
ax.pie(churn, labels=labels, autopct='%.0f%%')
plt.savefig('churn percentage.png')
plt.show()

"""Numerical"""

numerical_features = ['MonthlyCharges', 'TotalCharges', 'tenure']
fig, ax = plt.subplots(1, 3, figsize=(15, 6))
df[df.Churn == 'No'][numerical_features].hist(bins=20, color='blue', alpha=0.5, ax=ax)
df[df.Churn == 'Yes'][numerical_features].hist(bins=20, color='orange', alpha=0.5, ax=ax)
plt.savefig('numerical.png')
plt.show()

"""Categorical"""

fix, ax = plt.subplots(3,3, figsize=(14, 12))
sns.countplot(data=df, x='gender', hue='Churn', ax=ax[0][0])
sns.countplot(data=df, x='Partner', hue='Churn', ax=ax[0][1])
sns.countplot(data=df, x='SeniorCitizen', hue='Churn', ax=ax[0][2])
sns.countplot(data=df, x='PhoneService', hue='Churn', ax=ax[1][0])
sns.countplot(data=df, x='StreamingTV', hue='Churn', ax=ax[1][1])
sns.countplot(data=df, x='InternetService', hue='Churn', ax=ax[1][2])
sns.countplot(data=df, x='PaperlessBilling', hue='Churn', ax=ax[2][1])
plt.tight_layout()
plt.savefig('categorial.png')
plt.show()

"""## Data Preprocessing"""

cleaned_df = df.drop(['customerID', 'UpdatedAt'], axis=1)
print(cleaned_df.head())

"""Encoding"""

for column in cleaned_df.columns:
  if cleaned_df[column].dtype == np.float64 or cleaned_df[column].dtype == np.int64: continue
  cleaned_df[column] = LabelEncoder().fit_transform(cleaned_df[column])
print(cleaned_df.describe())

"""Splitting the dataset"""

X = cleaned_df.drop('Churn', axis=1)
y = cleaned_df['Churn']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
print('X_train shape: ', X_train.shape, ', y_train shape: ', y_train.shape)
print('Churn percentage in training data: ')
print(y_train.value_counts(normalize=True))
print('X_test shape: ', X_test.shape, ' ,y_test shape: ', y_test.shape)
print('Churn percentage in testing data: ')
print(y_test.value_counts(normalize=True))

"""## Model Selection

Logistic Regression
"""

log_model = LogisticRegression().fit(X_train, y_train)
print(log_model)

"""Performance of training data (metrics)"""

y_train_pred = log_model.predict(X_train)
print('Classification Report Training Model (Logistic Regression): ')
print(classification_report(y_train, y_train_pred))

"""Performance of training data (plots)"""

confusion_matrix_df = pd.DataFrame((confusion_matrix(y_train, y_train_pred)), ('No Churn', 'Churn'), ('No Churn', 'Churn'))

plt.figure()
heatmap = sns.heatmap(confusion_matrix_df, annot=True, annot_kws={'size':14}, fmt='d', cmap='YlGnBu')
heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize=14)
heatmap.xaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize=14)

plt.title('Confusion Matrix for Training Model\n (Logistic Regression)', fontsize=18, color='darkblue')
plt.ylabel('True Label', fontsize=14)
plt.xlabel('Predicted Label', fontsize=14)
plt.tight_layout()
plt.savefig('performance of training data.png')
plt.show()

"""Performance of test data (metrics)"""

y_test_pred = log_model.predict(X_test)
print('Classification Report Training Model (Logistic Regression): ')
print(classification_report(y_test, y_test_pred))

"""Performance of test data (plots)"""

confusion_matrix_df = pd.DataFrame((confusion_matrix(y_test, y_test_pred)), ('No Churn', 'Churn'), ('No Churn', 'Churn'))

plt.figure()
heatmap = sns.heatmap(confusion_matrix_df, annot=True, annot_kws={'size':14}, fmt='d', cmap='YlGnBu')
heatmap.yaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize=14)
heatmap.xaxis.set_ticklabels(heatmap.yaxis.get_ticklabels(), rotation=0, ha='right', fontsize=14)

plt.title('Confusion Matrix for Training Model\n (Logistic Regression)', fontsize=18, color='darkblue')
plt.ylabel('True Label', fontsize=14)
plt.xlabel('Predicted Label', fontsize=14)
plt.tight_layout()
plt.savefig('performance of test data.png')
plt.show()

"""Save the best model"""

pickle.dump(log_model, open('customer_churn.pkl', 'wb'))